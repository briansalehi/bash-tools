#!/usr/bin/env bash

prefix_path="${PREFIX_PATH:-$HOME/.local}"
source_path="$prefix_path/src"
preferred_version="${1}"
unset LDFLAGS
unset CXXFLAGS
unset CPPFLAGS

error()   { echo -e "\033[1;31m$*\033[0m" >&2; exit 1; }
notice()  { echo -e "\033[1;35m$*\033[0m"; }
success() { echo -e "\033[1;32m$*\033[0m"; }
code()    { echo -e "\n\t$*\n"; }

mkdir --parents "${source_path}"
cd "${source_path}" || error "Cannot move to ${source_path}"

if ! [ -d gcc ]
then
    notice "Cloning repository"
    git clone https://github.com/gcc-mirror/gcc || error "Cloning failed"
fi

cd gcc || error "Failed to move into ${source_path}/gcc directory"

notice "Cleaning repository"
git status | sed -n '/^Untracked files:$/,/^$/{1,3d;p}' | xargs rm -rf

notice "Updating repository"
git checkout master &>/dev/null
git pull --prune --tags origin | grep '[0-9]\+ files changed, [0-9]\+ insertions(+), [0-9]\+ deletions(-)'

notice "Fetching version list"
read -ra versions <<< "$(git tag --sort version:refname | grep -E '^releases/gcc-[0-9.]+$' | tac | xargs)"

current_version=
target_version="${versions[0]}"

if [ -n "$preferred_version" ]
then
    if grep -q "$preferred_version" <<< "${versions[*]}"
    then
        target_version="releases/gcc-$preferred_version"
    fi
fi

if [ -x "${prefix_path}/bin/gcc" ]
then
    current_version="releases/gcc-$("${prefix_path}/bin/gcc" --version | sed -En 's/.*[^0-9](([0-9]+\.){2}[0-9]+).*/\1/p;q')"

    if [ "${current_version}" == "${target_version}" ]
    then
        success "$(basename "${0%%-*}") already using latest version ${target_version#*-}"
        exit 0
    fi
fi

notice "Switching version${current_version:+ from }${current_version#*-} to ${target_version#*-}"
git checkout "${target_version}" || error "Failed to checkout latest version"

notice "Configuring"
./configure --prefix="${prefix_path}" --disable-multilib || error "Configuring failed"

notice "Building"
make -j$(($(nproc) / 2 + 1)) || error "Building failed"

notice "Installing"
make install || error "Installation failed"

success "Make executables visible by updating your PATH:"
code "include_path ${prefix_path/$HOME/\$HOME}/.local/bin"
