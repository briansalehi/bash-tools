#!/usr/bin/env bash

error()   { echo -e "\033[1;31m$*\033[0m" >&2; exit 1; }
notice()  { echo -e "\033[1;33m$*\033[0m"; }
log()     { echo -e "\033[1;33m$*\033[0m"; }
success() { echo -e "\033[1;32m$*\033[0m"; }
code()    { echo -e "\n\t$*\n"; }

window_stream() {
    local comment="$1"
    readonly frame_color="${WINDOW_COLOR:-5}"
    readonly frame_height=${WINDOW_SIZE:-3}
    local window_width
    local window_height
    local stream_file="/tmp/${RANDOM}.log"
    local scrolled_lines=0
    local reference_row

    window_width=$(tput cols)
    window_height=$(tput lines)

    IFS=';' read -rsdR -p $'\E[6n' comment_row _ </dev/tty
    comment_row=${comment_row#*[}

    log "$comment"

    # find a non-existing file to write the stream into
    while [ -s "${stream_file}" ]; do stream_file="/tmp/window.${RANDOM}"; done

    # capture current cursor position
    IFS=';' read -rsdR -p $'\E[6n' reference_row _ </dev/tty
    reference_row=${reference_row#*[}

    # handle cursor jump backs in a scrolling window
    readonly next_cursor_position=$((reference_row + frame_height))
    readonly scrolled_lines=$((next_cursor_position - window_height))
    if [ "${next_cursor_position}" -gt "$window_height" ]
    then
        # clear frame to automatically scroll the window and make the frame visible
        printf '\033[%s;%sH' "${reference_row}" 0
        for ((i = 0; i < frame_height; i++)); do printf "%*s\n" "${window_width}" ""; done
        printf '\033[%s;%sH' "${reference_row}" 0

        reference_row="$((reference_row - scrolled_lines))"
    fi

    while read -r line
    do
        # clear frame after processing previous buffer
        printf '\033[%s;%sH' "${reference_row}" 0
        for ((i = 0; i < frame_height; i++)); do printf "%*s\n" "${window_width}" ""; done
        printf '\033[%s;%sH' "${reference_row}" 0

        # flush buffer in the frame
        tput bold; tput setaf "${frame_color}"
        printf "%0.${window_width}s\n" "${line}" >> "${stream_file}"
        tail -n "${frame_height}" "${stream_file}"
    done

    # clear frame after processing the stream
    printf '\033[%s;%sH' "${reference_row}" 0
    for ((i = 0; i < frame_height; i++)); do printf "%*s\n" "${window_width}" ""; done
    printf '\033[%s;%sH' "${reference_row}" 0

    # dump the file path where the stream was written into
    printf '\033[%s;%sH' "${comment_row}" $((${#comment}+2))
    tput bold; tput setaf 8
    echo "${stream_file}"
    tput sgr0; tput cnorm
    printf '\033[%s;%sH' "${reference_row}" 0
}

export NVM_DIR="$HOME/.nvm"

if [ -d "$NVM_DIR" ] && [ -d "$NVM_DIR/.git" ]
then
    [ -h "$NVM_DIR/nvm.sh" ] && [ ! -s "$NVM_DIR/nvm.sh" ] && unlink "$NVM_DIR/nvm.sh"
    (
        cd "$NVM_DIR"
        ( git fetch --tags origin 2>&1 | window_stream "Updating repository" )
        ( git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)` 2>&1 | window_stream "Switching branch" )
    ) && \. "$NVM_DIR/nvm.sh"
else
    [ -d "$NVM_DIR" ] && rm -r "$NVM_DIR"
    (
        ( git clone --progress https://github.com/nvm-sh/nvm.git "$NVM_DIR" 2>&1 | window_stream "Cloning repository" )
        cd "$NVM_DIR"
        ( git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)` 2>&1 | window_stream "Switching branch" )
    ) && \. "$NVM_DIR/nvm.sh" && success "nvm installed"
fi

source "$HOME/.nvm/nvm.sh"

current_version="$(nvm version)"
latest_version="$(nvm version-remote)"

if [ "${current_version}" == "${latest_version}" ]
then
    success "$(basename "${0%%-*}") already on latest version" && exit 0
fi

( nvm install-latest-npm 2>&1 | window_stream "Updating npm" ) || error "Failed to install latest npm"
( nvm install "${latest_version}" 2>&1 | window_stream "Installing node" ) || error "Failed to install latest node version ${latest_version}"
( nvm use "${latest_version}" 2>&1 | window_stream "Setting default version" ) || error "Failed to switch node to version ${latest_version}"
( nvm alias default "${latest_version}" 2>&1 | window_stream "Creating alias" ) || error "Failed to set new version ${latest_version} as default"
( nvm uninstall "${current_version}" 2>&1 | window_stream "Uninstalling previous version" ) || error "Failed to uninstall previous version ${current_version}"
