#!/usr/bin/env bash

prefix_path="${PREFIX_PATH:-$HOME/.local}"
source_path="$prefix_path/src"
preferred_version="${1}"
tool_name=doxygen
repository_link="https://github.com/doxygen/doxygen.git"

# avoid system wide compiler settings interrupt compilation
unset LDFLAGS
unset CPPFLAGS
unset CFLAGS
unset CXXFLAGS

error()   { echo -e "\033[1;31m$*\033[0m" >&2; exit 1; }
notice()  { echo -e "\033[1;33m$*\033[0m"; }
success() { echo -e "\033[1;32m$*\033[0m"; }
code()    { echo -e "\n\t$*\n"; }

usage()   {
    notice "$(basename "$0") [x.y.z]\n";
    echo -e "  \033[2;38m$(basename "$0")\033[0m           will install the latest ${tool_name}"
    echo -e "  \033[2;38m$(basename "$0") 1.13.0\033[0m    will install ${tool_name} 1.13.0"
    echo
}

parse_arguments() {
    while [ $# -gt 0 ]
    do
        case "$1" in
            -h|--help) usage; exit 0 ;;
            [0-9]*.[0-9]*.[0-9]*) ;;
            *) usage; exit 1 ;;
        esac
        shift
    done
}

window_stream() {
    readonly frame_color="${WINDOW_COLOR:-5}"
    readonly frame_height=${WINDOW_SIZE:-5}
    local window_width
    local window_height
    local stream_file
    local scrolled_lines=0
    local reference_row

    window_width=$(tput cols)
    window_height=$(tput lines)
    stream_file="$(mktemp)"

    # find a non-existing file to write the stream into
    while [ -s "${stream_file}" ]; do stream_file="/tmp/window.${RANDOM}"; done

    # capture current cursor position
    IFS=';' read -rsdR -p $'\E[6n' reference_row _ </dev/tty
    reference_row=${reference_row#*[}

    # handle cursor jump backs in a scrolling window
    readonly next_cursor_position=$((reference_row + frame_height))
    readonly scrolled_lines=$((next_cursor_position - window_height))
    if [ "${next_cursor_position}" -gt "$window_height" ]
    then
        # clear frame to automatically scroll the window and make the frame visible
        printf '\033[%s;%sH' "${reference_row}" 0
        for ((i = 0; i < frame_height; i++)); do printf "%*s\n" "${window_width}" ""; done
        printf '\033[%s;%sH' "${reference_row}" 0

        reference_row="$((reference_row - scrolled_lines))"
    fi

    while read -r line
    do
        # clear frame after processing previous buffer
        printf '\033[%s;%sH' "${reference_row}" 0
        for ((i = 0; i < frame_height; i++)); do printf "%*s\n" "${window_width}" ""; done
        printf '\033[%s;%sH' "${reference_row}" 0

        # flush buffer in the frame
        tput bold; tput setaf "${frame_color}"
        printf "%0.${window_width}s\n" "${line}" >> "${stream_file}"
        tail -n "${frame_height}" "${stream_file}"
    done

    # clear frame after processing the stream
    printf '\033[%s;%sH' "${reference_row}" 0
    for ((i = 0; i < frame_height; i++)); do printf "%*s\n" "${window_width}" ""; done
    printf '\033[%s;%sH' "${reference_row}" 0

    # dump the file path where the stream was written into
    tput bold
    tput setaf 8
    echo -e "stored in ${stream_file}\033[0m"
    tput cnorm
    tput sgr0
}

prepare_source_repository() {
    mkdir --parents "${source_path}"
    cd "${source_path}" || error "Cannot move to ${source_path}"

    if ! [ -d ${tool_name} ]
    then
        notice "Cloning ${tool_name} repository in ${source_path}/${tool_name}"
        git clone ${repository_link} || error "Cloning failed"
    fi

    cd ${tool_name} || error "Failed to move into ${source_path}/${tool_name} directory"
}

clean_source_repository() {
    notice "Cleaning repository"
    git status | sed -n '/^Untracked files:$/,/^$/{1,3d;p}' | xargs rm -rf
}

update_source_repository() {
    notice "Updating repository"
    git checkout master &>/dev/null
    git pull --prune --tags origin 2>&1 | grep '[0-9]\+ files changed, [0-9]\+ insertions(+), [0-9]\+ deletions(-)' | window_stream
}

collect_available_versions() {
    notice "Fetching version list"
    read -ra versions <<< "$(git tag --sort version:refname | grep -E '^Release(_[0-9.]{1,2}){3}$' | tac | xargs)"
}

apply_preferred_version() {
    current_version=
    target_version="${versions[0]}"

    if [ -n "$preferred_version" ]
    then
        if grep -q "$preferred_version" <<< "${versions[*]}"
        then
            target_version="Release_${preferred_version//./_}"
        fi
    fi
}

collect_current_version() {
    if [ -x "${prefix_path}/bin/${tool_name}" ]
    then
        current_version="Release_$("${prefix_path}/bin/${tool_name}" --version | awk '{print $1}' | tr '.' '_')"

        if [ "${current_version}" == "${target_version}" ]
        then
            new_version=${target_version#*_}
            new_version=${new_version//_/.}
            success "$(basename "${0%%-*}") already using latest version ${new_version}"
            exit 0
        fi
    fi

    current_version=${current_version#*_}
    current_version=${current_version//_/.}
    new_version=${target_version#*_}
    new_version=${new_version//_/.}
}

change_source_repository_version() {
    notice "Switching version${current_version:+ from }${current_version} to ${new_version}"
    ( git checkout "${target_version}" 2>&1 | window_stream ) || error "Failed to checkout latest version"
}

configure_package() {
    notice "Configuring"
    ( cmake -S . -B "../${tool_name}-${new_version}-build" -G "Unix Makefiles" -D CMAKE_INSTALL_PREFIX="${prefix_path}" 2>&1 | window_stream ) || error "Configuring failed"
}

build_project() {
    notice "Building"
    ( cmake --build "../${tool_name}-${new_version}-build" --parallel $(($(nproc) / 2)) 2>&1 | window_stream ) || error "Building failed"
}

install_artifacts() {
    notice "Installing"
    ( cmake --install "../${tool_name}-${new_version}-build" 2>&1 | window_stream ) || error "Installation failed"
}

notify_path() {
    if ! grep -q "${prefix_path}" <<< "$PATH"
    then
        success "Make executables visible by updating your PATH:"
        code "include_path ${prefix_path/$HOME/\$HOME}/.local/bin"
    fi
}

parse_arguments "$@"
prepare_source_repository
clean_source_repository
update_source_repository
collect_available_versions
apply_preferred_version
collect_current_version
change_source_repository_version
configure_package
build_project
install_artifacts
notify_path

