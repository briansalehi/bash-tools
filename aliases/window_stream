#!/usr/bin/env bash

window_stream() {
    readonly frame_color="${WINDOW_COLOR:-5}"
    readonly frame_height=${WINDOW_SIZE:-3}
    local window_width
    local window_height
    local stream_file="/tmp/window.${RANDOM}"
    local scrolled_lines=0
    local reference_row

    window_width=$(tput cols)
    window_height=$(tput lines)

    # find a non-existing file to write the stream into
    while [ -s "${stream_file}" ]; do stream_file="/tmp/window.${RANDOM}"; done

    # capture current cursor position
    IFS=';' read -rsdR -p $'\E[6n' reference_row _ </dev/tty
    reference_row=${reference_row#*[}

    # handle cursor jump backs in a scrolling window
    readonly next_cursor_position=$((reference_row + frame_height))
    readonly scrolled_lines=$((next_cursor_position - window_height))
    if [ "${next_cursor_position}" -gt "$window_height" ]
    then
        # clear frame to automatically scroll the window and make the frame visible
        printf '\033[%s;%sH' "${reference_row}" 0
        for ((i = 0; i < frame_height; i++)); do printf "%*s\n" "${window_width}" ""; done
        printf '\033[%s;%sH' "${reference_row}" 0

        reference_row="$((reference_row - scrolled_lines))"
    fi

    while read -r line
    do
        # clear frame after processing previous buffer
        printf '\033[%s;%sH' "${reference_row}" 0
        for ((i = 0; i < frame_height; i++)); do printf "%*s\n" "${window_width}" ""; done
        printf '\033[%s;%sH' "${reference_row}" 0

        # flush buffer in the frame
        tput bold; tput setaf "${frame_color}"
        printf "%0.${window_width}s\n" "${line}" >> "${stream_file}"
        tail -n "${frame_height}" "${stream_file}"
    done

    # clear frame after processing the stream
    printf '\033[%s;%sH' "${reference_row}" 0
    for ((i = 0; i < frame_height; i++)); do printf "%*s\n" "${window_width}" ""; done
    printf '\033[%s;%sH' "${reference_row}" 0

    # dump the file path where the stream was written into
    tput bold; tput setaf 8
    echo "stored in ${stream_file}"
    tput sgr0; tput cnorm
}
